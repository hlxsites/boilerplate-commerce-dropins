{"version":3,"file":"CartSummaryItem.js","sources":["../../src/utils/autocompleteFieldCodes/autocompleteFieldCodes.ts","../../src/utils/isEmpty/isEmpty.ts","../../src/utils/processFormFields/processFormFields.ts","../../src/utils/refetchEstimatedShippingMethods/refetchEstimatedShippingMethods.ts","../../src/components/FieldsForm/validation.ts","../../src/components/FieldsForm/FieldsFormSkeleton.tsx","../../src/components/FieldsForm/fieldFactory.tsx","../../src/components/FieldsForm/FieldsForm.tsx","../../../ElsieSDK/packages/elsie/src/lib/form-values.ts","../../src/components/AddressForm/AddressForm.tsx","../../src/components/AddressForm/useAddressBackup.ts","../../src/hooks/useValidity/useValidity.ts","../../src/components/AddressForm/useAddressForm.ts","../../src/components/AddressForm/usePreselectedFields.ts","../../src/hooks/useBreakpoint/useBreakpoint.ts","../../src/components/Checkout/Checkout.tsx","../../src/components/Heading/Heading.tsx"],"sourcesContent":["export interface fieldCodes {\n  firstname: string;\n  lastname: string;\n  company: string;\n  country: string;\n  region: string;\n  city: string;\n  postcode: string;\n  telephone: string;\n  street: string;\n  email: string;\n  middlename: string;\n  prefix: string;\n  suffix: string;\n}\n\n// HTML attribute: autocomplete\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n// https://www.w3.org/TR/WCAG21/#input-purposes\nconst autocompleteFieldCodes: fieldCodes = {\n  firstname: 'given-name',\n  lastname: 'family-name',\n  company: 'organization',\n  country: 'country',\n  region: 'address-level1',\n  city: 'address-level2',\n  postcode: 'postal-code',\n  telephone: 'tel',\n  street: 'address-line1',\n  email: 'email',\n  middlename: 'additional-name',\n  prefix: 'honorific-prefix',\n  suffix: 'honorific-suffix',\n};\n\nexport default autocompleteFieldCodes;\n","export function isEmpty(obj: Record<string, any>): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import { AttributeFrontendInputEnum } from '@/checkout/__generated__/types';\nimport { FormFields } from '@/checkout/api';\nimport {\n  AddressFormErrors,\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Country,\n  Region,\n  StoreConfig,\n} from '@/checkout/data/models';\nimport { regionsSignal } from '@/checkout/signals';\n\nimport {\n  getMultilineValues,\n  refetchEstimatedShippingMethods,\n} from '@/checkout/utils';\nimport { PickerOption } from '@adobe/elsie/src/components';\nimport { StateUpdater } from 'preact/hooks';\n\ntype FormFieldsProcessorProps = {\n  fields: FormFields;\n  address: AddressFormValues;\n  setAddress: StateUpdater<AddressFormValues>;\n  addressType: AddressFormTypes;\n  errors: AddressFormErrors;\n  config: StoreConfig;\n  availableRegions: Region[];\n  availableCountries: Country[] | undefined;\n  onSelection: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onBlur: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n};\n\nexport type FormField = Omit<FormFields[number], 'options'> & {\n  addressType: AddressFormTypes;\n  className: string;\n  disabled?: boolean;\n  error: string | string[];\n  handleSelect?: (event: Event) => void;\n  id?: string;\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n  options?: PickerOption[];\n  value: string | string[];\n};\n\ntype FormFieldOptions = FormFields[number]['options'];\n\nconst isValidOption = (option: FormFieldOptions[number]) => {\n  return option?.label && option?.value;\n};\n\nconst transformFormFieldOptions = (data: FormFieldOptions): PickerOption[] => {\n  if (!data) return [];\n\n  return data.filter(isValidOption).map((option) => ({\n    text: option!.label,\n    value: option!.value,\n  }));\n};\n\nconst transformRegionOptions = (regions: Region[]): PickerOption[] => {\n  return regions.map((region) => {\n    const value = region?.id?.toString() || region.code;\n    return { text: region.name, value };\n  });\n};\n\nconst transformCountryOptions = (\n  countries: Country[] | undefined\n): PickerOption[] => {\n  if (!countries) return [];\n\n  return countries.map((country) => ({\n    text: country.label,\n    value: country.value,\n  }));\n};\n\nexport function processFormFields({\n  fields,\n  address,\n  setAddress,\n  addressType,\n  errors,\n  config,\n  availableCountries,\n  availableRegions,\n  onSelection,\n  onChange,\n  onBlur,\n  onInvalid,\n}: FormFieldsProcessorProps): FormField[] {\n  const resetRegion = () => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.Region]: '',\n      [AddressFormFields.RegionId]: '',\n    }));\n  };\n\n  const syncRegionId = (regionId: string) => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.RegionId]: regionId,\n    }));\n  };\n\n  return fields.map((field) => {\n    let is_required = field.is_required;\n    let value: string | string[];\n    let inputType = field.frontend_input;\n    let options: PickerOption[] = [];\n    let error: string | string[];\n    let handleSelect;\n    let disabled = false;\n\n    if (inputType === 'MULTILINE') {\n      value = getMultilineValues(field.code, address);\n      error = getMultilineValues(field.code, errors);\n    } else {\n      value = address[field.code];\n      error = errors[field.code] || '';\n    }\n\n    if (\n      field.code !== AddressFormFields.Region &&\n      field.code !== AddressFormFields.Country\n    ) {\n      options = transformFormFieldOptions(field.options);\n    }\n\n    if (field.code === AddressFormFields.Country) {\n      options = transformCountryOptions(availableCountries);\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.country = value as string;\n\n        handleSelect = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          const { value } = target;\n\n          if (value) {\n            refetchEstimatedShippingMethods({\n              country_code: value,\n            });\n          }\n\n          onSelection(event);\n          resetRegion();\n        };\n      } else {\n        handleSelect = onSelection;\n      }\n    }\n\n    if (field.code === AddressFormFields.RegionId) {\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.selectedRegionId = value as string;\n      }\n    }\n\n    if (field.code === AddressFormFields.Region) {\n      if (addressType === regionsSignal.value.addressType) {\n        disabled = regionsSignal.value.pending;\n      }\n\n      is_required = config!.countriesWithRequiredRegion.includes(\n        address?.country_id\n      );\n      options = transformRegionOptions(availableRegions);\n\n      if (!is_required && !config!.displayStateIfOptional) {\n        inputType = AttributeFrontendInputEnum.Undefined;\n      }\n\n      inputType =\n        options.length > 0\n          ? AttributeFrontendInputEnum.Select\n          : AttributeFrontendInputEnum.Text;\n\n      if (inputType === 'SELECT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          handleSelect = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const selectedRegion = target.value;\n\n            refetchEstimatedShippingMethods({\n              country_code: regionsSignal.value.country as string,\n              region_id: selectedRegion,\n            });\n\n            onSelection(event);\n            syncRegionId(selectedRegion);\n          };\n        } else {\n          handleSelect = (event: Event) => {\n            onSelection(event);\n            const target = event.target as HTMLSelectElement;\n            const selectedRegion = target.value;\n            syncRegionId(selectedRegion);\n          };\n        }\n      } else if (inputType === 'TEXT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          const defaultOnChange = onChange;\n\n          onChange = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const { value } = target;\n\n            if (regionsSignal.value.country) {\n              refetchEstimatedShippingMethods({\n                country_code: regionsSignal.value.country as string,\n                region_name: value as string,\n              });\n            }\n\n            defaultOnChange(event);\n          };\n        }\n      }\n\n      value =\n        options.length > 0\n          ? options.find((regionOption) => regionOption!.value === value)\n              ?.value || ''\n          : value;\n    }\n\n    if (field.code === AddressFormFields.PostCode) {\n      is_required = !config!.countriesWithOptionalZipCode.includes(\n        address?.country_id as string\n      );\n    }\n\n    return {\n      ...field,\n      is_required,\n      frontend_input: inputType,\n      addressType,\n      className: `checkout-address-form__${field.code}`,\n      value,\n      options,\n      error,\n      onChange,\n      onBlur,\n      onInvalid,\n      handleSelect,\n      disabled,\n    };\n  });\n}\n\nexport type ProcessedFormFields = ReturnType<typeof processFormFields>;\n","import { cartSignal } from '@/checkout/signals';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { ShippingEstimationCriteria, estimateShippingMethods } from '@/checkout/api';\n\nlet estimateShipppingTimer: ReturnType<typeof setTimeout>;\nexport function refetchEstimatedShippingMethods(\n  criteria: ShippingEstimationCriteria\n) {\n  const cartData = cartSignal.value.data;\n  const hasCartData = !!cartData;\n  const firstAddress = cartData?.shippingAddresses?.[0];\n  const availableShippingMethods = firstAddress?.availableShippingMethods;\n\n  if (hasCartData && !availableShippingMethods) {\n    clearTimeout(estimateShipppingTimer);\n\n    estimateShipppingTimer = setTimeout(() => {\n      estimateShippingMethods({ cartId: cartData.id, criteria });\n    }, DEBOUNCE_TIME);\n  }\n}\n","import {\n  ValidationRule,\n  ValidationRuleEnum,\n} from '@/checkout/__generated__/types';\n\nexport type ValidityProps = {\n  accept?: string;\n  max?: string | number;\n  maxLength?: number;\n  min?: string | number;\n  minLength?: number;\n  pattern?: string;\n  required?: boolean;\n};\n\nexport type InputValidation =\n  | 'alphanumeric'\n  | 'alphanumeric-w-space'\n  | 'alphanum-with-spaces'\n  | 'alpha'\n  | 'url'\n  | 'numeric'\n  | 'email';\n\nexport const validityProps = (\n  rules: ValidationRule[]\n): ValidationRule & ValidityProps =>\n  rules.reduce((props, rule) => {\n    switch (rule.name) {\n      case ValidationRuleEnum.DateRangeMax:\n        return { ...props, max: rule.value };\n      case ValidationRuleEnum.DateRangeMin:\n        return { ...props, min: rule.value };\n      case ValidationRuleEnum.FileExtensions:\n        return { ...props, accept: rule.value };\n      case ValidationRuleEnum.InputValidation:\n        return {\n          ...props,\n          pattern: patternFor(rule.value as InputValidation),\n        };\n      case ValidationRuleEnum.MaxFileSize:\n      case ValidationRuleEnum.MaxImageHeight:\n      case ValidationRuleEnum.MaxImageWidth:\n        return props;\n      case ValidationRuleEnum.MaxTextLength:\n        return { ...props, maxLength: rule.value };\n      case ValidationRuleEnum.MinTextLength:\n        return { ...props, minLength: rule.value };\n      default:\n        throw new Error(`Unknown rule: ${rule.name}`);\n    }\n  }, {});\n\nexport type Patterns = {\n  [key in InputValidation]: RegExp;\n};\n\n// TODO allow to override patterns\nexport const patterns: Patterns = {\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'alphanumeric-w-space': /^[a-zA-Z0-9 ]+$/,\n  'alphanum-with-spaces': /^[a-zA-Z0-9 ]+$/,\n  email:\n    /^([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\n  numeric: /^[0-9]+$/,\n  url: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n};\n\nconst patternFor = (type: InputValidation): string => {\n  switch (type) {\n    case 'alpha':\n      return patterns.alpha.source;\n    case 'alphanumeric':\n      return patterns.alphanumeric.source;\n    case 'alphanumeric-w-space':\n      return patterns['alphanumeric-w-space'].source;\n    case 'alphanum-with-spaces':\n      return patterns['alphanum-with-spaces'].source;\n    case 'url':\n      return patterns.url.source;\n    case 'numeric':\n      return patterns.numeric.source;\n    case 'email':\n      return patterns.email.source;\n    default:\n      throw new Error(`Unknown validation type: ${type}`);\n  }\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const FieldsFormSkeleton: FunctionComponent = (props) => {\n  return (\n    <Skeleton {...props}>\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n    </Skeleton>\n  );\n};\n","import { ValidationRule } from '@/checkout/__generated__/types';\nimport { BaseField, validityProps } from '@/checkout/components/FieldsForm';\nimport autocompleteFieldCodes, {\n  fieldCodes,\n} from '@/checkout/utils/autocompleteFieldCodes/autocompleteFieldCodes';\nimport { Field, Input, Picker } from '@adobe/elsie/components';\n\nconst hiddenField = (field: BaseField) => {\n  const { id, addressType, className, code, value, default_value } = field;\n  const fieldID = id || code;\n\n  return (\n    <input\n      className={className}\n      id={`${addressType}-${fieldID}`}\n      key={code}\n      name={code}\n      type=\"hidden\"\n      value={value ?? default_value}\n    />\n  );\n};\n\nconst textField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    error,\n    id,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const validity = validityProps(validate_rules as ValidationRule[]);\n  const fieldID = id || code;\n\n  return (\n    <Field disabled={field.disabled} error={error as string}>\n      <Input\n        aria-label={field.label!}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        className={className}\n        floatingLabel={`${field.label} ${field.is_required ? '*' : ''}`}\n        id={`${addressType}-${fieldID}`}\n        onBlur={onBlur}\n        onChange={onChange}\n        onInvalid={onInvalid}\n        placeholder={field.label!}\n        required={field.is_required || false}\n        type=\"text\"\n        // @ts-ignore\n        name={code}\n        // @ts-ignore\n        value={value ?? undefined}\n        {...validity}\n      />\n    </Field>\n  );\n};\n\nconst multilineField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    id,\n    is_required,\n    label,\n    multiline_count,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const numOfFields = multiline_count ?? 0;\n  const fieldID = id || code;\n  const validity = validityProps(validate_rules as ValidationRule[]);\n\n  return (\n    <>\n      {Array.from(Array(numOfFields).keys()).map((i) => (\n        <Field\n          disabled={disabled}\n          error={(error as string[])?.[i] || ''}\n          key={`${code}-${i}`}\n          className=\"dropin-field--multiline\"\n        >\n          <Input\n            id={`${addressType}-${fieldID}-${i}`}\n            className={className}\n            floatingLabel={`${label} ${i != 0 ? i : ''} ${\n              is_required && i === 0 ? '*' : ''\n            }`}\n            autocomplete={\n              i === 0 ? autocompleteFieldCodes[code as keyof fieldCodes] : 'off'\n            }\n            aria-label={label!}\n            placeholder={`${label} ${i != 0 ? i : ''}`}\n            type=\"text\"\n            required={is_required && i === 0}\n            onChange={onChange}\n            onBlur={onBlur}\n            onInvalid={onInvalid}\n            // @ts-ignore\n            name={`${code}-${i}`}\n            // @ts-ignore\n            value={(value as string[])?.[i] || undefined}\n            {...validity}\n          />\n        </Field>\n      ))}\n    </>\n  );\n};\n\nconst selectField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    handleSelect,\n    id,\n    is_required,\n    label,\n    onBlur,\n    onInvalid,\n    options,\n    value,\n  } = field;\n\n  const fieldID = id || code;\n  const handleSelectAttribute = handleSelect ? { handleSelect } : {};\n\n  return (\n    <Field disabled={disabled} error={error as string}>\n      <Picker\n        id={`${addressType}-${fieldID}`}\n        className={className}\n        key={code}\n        name={code}\n        floatingLabel={`${label} ${is_required ? '*' : ''}`}\n        required={is_required}\n        placeholder={label!}\n        aria-label={label!}\n        options={options}\n        value={value as string}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        onBlur={onBlur}\n        onInvalid={onInvalid}\n        {...handleSelectAttribute}\n      />\n    </Field>\n  );\n};\n\nexport const createField = (field: BaseField) => {\n  switch (field.frontend_input) {\n    case 'BOOLEAN':\n    case 'DATE':\n    case 'DATETIME':\n    case 'FILE':\n    case 'GALLERY':\n    case 'IMAGE':\n    case 'MEDIA_IMAGE':\n    case 'MULTISELECT':\n    case 'PRICE':\n    case 'TEXTAREA':\n    case 'UNDEFINED':\n    case 'WEIGHT':\n      return null;\n    case 'HIDDEN':\n      return hiddenField(field);\n    case 'TEXT':\n      return textField(field);\n    case 'MULTILINE':\n      return multilineField(field);\n    case 'SELECT':\n      return selectField(field);\n    default:\n      throw new Error(`Unknown field type: ${field.frontend_input}`);\n  }\n};\n","import { FunctionComponent, Ref } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/FieldsForm/FieldsForm.css';\nimport { createField } from './fieldFactory';\nimport { Heading } from '@/checkout/components';\nimport { Text } from '@adobe/elsie/i18n';\nimport { ProcessedFormFields } from '@/checkout/utils';\n\nexport type BaseField = ProcessedFormFields[number] & {\n  id?: string;\n  disabled?: boolean;\n  handleSelect?: (event: Event) => void;\n};\n\nexport interface FieldsFormProps extends HTMLAttributes<HTMLDivElement> {\n  headingId: string;\n  name: string;\n  formRef: Ref<HTMLFormElement>;\n  fields: BaseField[];\n}\n\nexport const FieldsForm: FunctionComponent<FieldsFormProps> = ({\n  className,\n  name,\n  headingId,\n  formRef,\n  fields,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['checkout-fields-form', className])}>\n      <Heading\n        level={2}\n        children={<Text id={headingId} />}\n        className=\"checkout-fields-form__title\"\n      />\n\n      <form\n        name={name}\n        ref={formRef}\n        className={classes(['checkout-fields-form__form', className])}\n        noValidate\n      >\n        {fields\n          .sort((a, b) => {\n            return a.sort_order! - b.sort_order!;\n          })\n          .map(createField)}\n      </form>\n    </div>\n  );\n};\n","export const getFormValues = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n  const result = Object.fromEntries(formData);\n  return result;\n};\n\nexport const getFormErrors = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n\n  const data = Object.fromEntries(formData);\n\n  const result = Object.entries(data).reduce((result, [key]) => {\n    // @ts-ignore\n    const field = form.elements[key];\n\n    return field?.validationMessage\n      ? { ...result, [key]: field.validationMessage }\n      : { ...result };\n  }, {});\n\n  return result;\n};\n","import { FormFields, getRegions } from '@/checkout/api';\nimport { FieldsFormSkeleton } from '@/checkout/components';\nimport {\n  DefaultValues,\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n  SaveAddressCommand,\n  useAddressForm,\n  usePreselectedFields,\n} from '@/checkout/components/AddressForm';\nimport '@/checkout/components/AddressForm/AddressForm.css';\nimport { FieldsForm as Component } from '@/checkout/components/FieldsForm/FieldsForm';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  useStore,\n  useAddressFormFields,\n  useCountries,\n} from '@/checkout/context';\nimport {\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Region,\n} from '@/checkout/data/models';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty, processFormFields } from '@/checkout/utils';\nimport { getFormErrors } from '@adobe/elsie/lib/form-values';\nimport {\n  HTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'preact/compat';\nimport { StateUpdater } from 'preact/hooks';\n\nfunction useDefaultValues(defaultCountry: string | undefined) {\n  const [defaultValues, setDefaultValues] = useState<DefaultValues>({});\n\n  useEffect(() => {\n    if (!defaultCountry) return;\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      country_id: defaultCountry,\n    }));\n  }, [defaultCountry]);\n\n  return { defaultValues };\n}\n\nfunction useRegions({\n  country,\n  addressType,\n}: {\n  country: string | undefined;\n  addressType: AddressFormTypes;\n}) {\n  const [availableRegions, setAvailableRegions] = useState<Region[]>([]);\n\n  useEffect(() => {\n    if (!country) {\n      setAvailableRegions([]);\n      return;\n    }\n\n    getRegions(country, addressType)\n      .then((data) => {\n        setAvailableRegions(data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [setAvailableRegions, country, addressType]);\n\n  return { availableRegions };\n}\n\nfunction useFormFill({\n  shouldAutoFillForm,\n  addressType,\n  setAddress,\n  fields,\n}: {\n  shouldAutoFillForm?: () => boolean;\n  addressType: AddressFormTypes;\n  setAddress: StateUpdater<AddressFormValues>;\n  fields?: FormFields;\n}) {\n  const [hasFormFillCompleted, setHasFormFillCompleted] = useState(false);\n  const cartData = cartSignal.value.data;\n\n  useEffect(() => {\n    if (hasFormFillCompleted) return;\n\n    const isReadyToProcess = cartData && fields;\n    if (!isReadyToProcess) return;\n\n    setHasFormFillCompleted(true);\n\n    const addressData =\n      addressType === AddressFormTypes.SHIPPING\n        ? cartData?.shippingAddresses\n        : cartData?.billingAddress;\n\n    const isAnAddressList = Array.isArray(addressData);\n    const hasAddressData = isAnAddressList\n      ? addressData.length > 0\n      : !!addressData;\n\n    if (!hasAddressData) return;\n    if (shouldAutoFillForm && !shouldAutoFillForm()) return;\n\n    const isMultiline = (code: string) => {\n      if (!fields) return false;\n      const field = fields.find((field) => field.code === code);\n      if (!field) return false;\n      return field.frontend_input === 'MULTILINE';\n    };\n\n    const firstAddress = Array.isArray(addressData)\n      ? addressData[0]\n      : addressData;\n\n    if (!firstAddress) return;\n\n    const addressFormValues: AddressFormValues = {\n      [AddressFormFields.City]: firstAddress.city,\n      [AddressFormFields.Company]: firstAddress.company || '',\n      [AddressFormFields.Country]: firstAddress.country.value,\n      [AddressFormFields.FirstName]: firstAddress.firstName,\n      [AddressFormFields.LastName]: firstAddress.lastName,\n      [AddressFormFields.PostCode]: firstAddress.postCode || '',\n      [AddressFormFields.Telephone]: firstAddress.telephone || '',\n      [AddressFormFields.Vat]: firstAddress.vatId || '',\n    };\n\n    const region = firstAddress.region;\n\n    if (region) {\n      const regionId = region?.id?.toString();\n\n      if (regionId) {\n        addressFormValues[AddressFormFields.Region] = regionId;\n        addressFormValues[AddressFormFields.RegionId] = regionId;\n      } else {\n        addressFormValues[AddressFormFields.Region] = region.code;\n      }\n    }\n\n    if (firstAddress?.street && firstAddress.street.length > 0) {\n      firstAddress.street.forEach((street, index) => {\n        addressFormValues[\n          `${AddressFormFields.Street}${MULTILINE_SUFFIX}${index}`\n        ] = street!;\n      });\n    }\n\n    const customAttributes = firstAddress?.customAttributes || [];\n\n    customAttributes.forEach((attribute) => {\n      if (!isMultiline(attribute.code)) {\n        addressFormValues[attribute.code] = attribute.value;\n      } else {\n        const values = attribute.value.split(MULTILINE_CUSTOM_ATTR_SPLIT);\n        values.forEach((value, index) => {\n          addressFormValues[`${attribute.code}${MULTILINE_SUFFIX}${index}`] =\n            value;\n        });\n      }\n    });\n\n    setAddress(addressFormValues);\n  }, [\n    setAddress,\n    shouldAutoFillForm,\n    addressType,\n    cartData,\n    fields,\n    hasFormFillCompleted,\n  ]);\n}\n\nexport interface AddressFormProps extends HTMLAttributes<HTMLDivElement> {\n  name: string;\n  preselectedFields?: PreselectedAddressFields;\n  addressType: AddressFormTypes;\n  headingId: string;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n  shouldAutoFillForm?: () => boolean;\n}\n\nexport type AddressFormHandle = {\n  triggerSaveAddress: (\n    signal: AbortSignal\n  ) => Promise<typeof cartSignal.value.data> | undefined;\n};\n\nexport const AddressForm = forwardRef<AddressFormHandle, AddressFormProps>(\n  (\n    {\n      name,\n      preselectedFields,\n      addressType,\n      headingId,\n      saveAddressHandler,\n      children,\n      shouldAutoFillForm,\n      ...props\n    },\n    ref\n  ) => {\n    const { fields } = useAddressFormFields();\n    const { countries: availableCountries } = useCountries();\n    const isLoadingCountries = availableCountries === undefined;\n    const isLoadingFormFields = fields === undefined;\n\n    const { config } = useStore();\n    const isLoadingStoreConfig = config === undefined;\n\n    const { defaultValues } = useDefaultValues(config?.defaultCountry);\n\n    const { preselection } = usePreselectedFields({\n      fields,\n      preselectedFields,\n    });\n\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const {\n      address,\n      setAddress,\n      onSelection,\n      errors,\n      onChange,\n      onInvalid,\n      onBlur,\n    } = useAddressForm({\n      formRef,\n      type: addressType,\n      defaultValues,\n      preselection,\n      saveAddressHandler,\n    });\n\n    const { availableRegions } = useRegions({\n      country: address.country_id,\n      addressType,\n    });\n\n    useImperativeHandle(ref, () => ({\n      triggerSaveAddress: (signal: AbortSignal) => {\n        if (!formRef.current) return;\n        const errors = getFormErrors(formRef.current);\n        if (!isEmpty(errors)) return;\n        return saveAddressHandler({ signal, address });\n      },\n    }));\n\n    useFormFill({\n      shouldAutoFillForm,\n      addressType,\n      setAddress,\n      fields,\n    });\n\n    const isLoading =\n      isLoadingFormFields || isLoadingCountries || isLoadingStoreConfig;\n\n    if (isLoading) {\n      return <FieldsFormSkeleton data-testid={`${addressType}-skeleton`} />;\n    }\n\n    const transformedFields = processFormFields({\n      fields,\n      address,\n      setAddress,\n      addressType,\n      errors,\n      config,\n      availableCountries,\n      availableRegions,\n      onSelection,\n      onChange,\n      onBlur,\n      onInvalid,\n    });\n\n    const typeMapping = {\n      [AddressFormTypes.SHIPPING]: 'shipping',\n      [AddressFormTypes.BILLING]: 'billing',\n    };\n\n    return (\n      <Component\n        {...props}\n        data-testid={`${typeMapping[addressType]}-form`}\n        name={name}\n        className={`checkout-${typeMapping[addressType]}-form`}\n        headingId={headingId}\n        formRef={formRef}\n        fields={transformedFields}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useServices } from '@/checkout/context';\nimport { events } from '@adobe/event-bus';\nimport { DEBOUNCE_TIME } from './constants';\nimport {\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models/address-form';\n\nexport function useAddressBackup(addressType: AddressFormTypes) {\n  const { backupService } = useServices();\n  const [addressBackup, setAddressBackup] = useState<AddressFormValues | null>(\n    null\n  );\n\n  // restore address from local storage\n  useEffect(() => {\n    const backup = backupService.restore<AddressFormValues>(addressType);\n    if (!backup) return;\n    setAddressBackup(backup);\n  }, [addressType, backupService]);\n\n  // remove backup when the order is placed\n  useEffect(() => {\n    const onOrder = events.on('checkout/order', () => {\n      backupService.remove(addressType);\n    });\n\n    return () => {\n      onOrder?.off();\n    };\n  }, [addressType, backupService]);\n\n  const backup = useCallback(\n    (address: AddressFormValues) => {\n      return setTimeout(() => {\n        // we do not want to update the state to avoid re-rendering\n        backupService.backup<AddressFormValues>(addressType, address);\n      }, DEBOUNCE_TIME);\n    },\n    [addressType, backupService]\n  );\n\n  const removeBackup = useCallback(() => {\n    backupService.remove(addressType);\n  }, [addressType, backupService]);\n\n  return { addressBackup, backup, removeBackup };\n}\n","import { useCallback, useState } from 'preact/hooks';\n\nexport type Translations = {\n  badInput: string;\n  patternMismatch: string;\n  rangeOverflow: string;\n  rangeUnderflow: string;\n  tooLong: string;\n  tooShort: string;\n  typeMismatch: string;\n  valueMissing: string;\n};\n\ntype FormElement = HTMLInputElement | HTMLSelectElement;\n\ntype Constraint =\n  | 'badInput'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valueMissing';\n\ntype Attribute = 'aria-label' | 'maxlength' | 'minlength' | 'min' | 'max';\n\nconst attributesMapping: Record<Constraint, Attribute> = {\n  badInput: 'aria-label',\n  patternMismatch: 'aria-label',\n  rangeOverflow: 'max',\n  rangeUnderflow: 'min',\n  tooLong: 'maxlength',\n  tooShort: 'minlength',\n  typeMismatch: 'aria-label',\n  valueMissing: 'aria-label',\n};\n\nconst constraints: Constraint[] = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valueMissing',\n];\n\nexport const useValidity = (translations: Translations) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateFormElement = useCallback(\n    (formElement: FormElement) => {\n      const { name, validity, validationMessage } = formElement;\n\n      let error = validity.valid ? '' : validationMessage;\n\n      constraints.forEach((constraint) => {\n        if (!validity[constraint]) return;\n        const translation = translations[constraint];\n        if (!translation) return;\n        const attribute = attributesMapping[constraint];\n        error = translation.replace(\n          '{field}',\n          formElement.getAttribute(attribute) || ''\n        );\n      });\n\n      setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n    },\n    [translations]\n  );\n\n  return {\n    errors,\n    validateFormElement,\n  };\n};\n","import { PreselectedMappedField } from '@/checkout/components/AddressForm';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { useAddressBackup } from '@/checkout/components/AddressForm/useAddressBackup';\nimport {\n  AddressFormErrors,\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models';\nimport {\n  Translations as ValidityTranslations,\n  useValidity,\n} from '@/checkout/hooks/useValidity';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty } from '@/checkout/utils';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getFormErrors } from '@adobe/elsie/lib';\nimport { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nexport type DefaultValues = {\n  country_id?: string;\n};\n\nexport type AddressFormState = {\n  address: AddressFormValues;\n  errors: AddressFormErrors;\n};\n\nexport type SaveAddressCommand = {\n  signal?: AbortSignal;\n  address: AddressFormValues;\n};\n\nexport type UseAddressFormProps = {\n  formRef: RefObject<HTMLFormElement>;\n  type: AddressFormTypes;\n  defaultValues?: DefaultValues;\n  preselection?: PreselectedMappedField | null;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n};\n\nconst isFormValid = (formRef: RefObject<HTMLFormElement>): boolean => {\n  const form = formRef.current;\n  if (!form) return false;\n  const errors = getFormErrors(form);\n  return isEmpty(errors);\n};\n\nexport const useAddressForm = ({\n  formRef,\n  type,\n  defaultValues = {},\n  preselection = {},\n  saveAddressHandler,\n}: UseAddressFormProps) => {\n  const translations = useText({\n    badInput: 'Checkout.AddressForm.Validity.badInput',\n    patternMismatch: 'Checkout.AddressForm.Validity.patternMismatch',\n    rangeUnderflow: 'Checkout.AddressForm.Validity.rangeUnderflow',\n    tooLong: 'Checkout.AddressForm.Validity.tooLong',\n    tooShort: 'Checkout.AddressForm.Validity.tooShort',\n    typeMismatch: 'Checkout.AddressForm.Validity.typeMismatch',\n    valueMissing: 'Checkout.AddressForm.Validity.valueMissing',\n  }) as ValidityTranslations;\n\n  const hasUnsavedChanges = useRef(false);\n  const [address, setAddress] = useState<AddressFormValues>({});\n\n  const { addressBackup, backup, removeBackup } = useAddressBackup(type);\n\n  const { errors, validateFormElement } = useValidity(translations);\n\n  const saveAddressForm = useCallback(\n    (command: SaveAddressCommand) => {\n      hasUnsavedChanges.current = false;\n      saveAddressHandler(command)\n        .then(() => {\n          removeBackup();\n        })\n        .catch((error) => {\n          hasUnsavedChanges.current = true;\n          console.error('Saving address form failed:', error);\n        });\n    },\n    [removeBackup, saveAddressHandler]\n  );\n\n  const updateField = (code: string, value: string) => {\n    setAddress((prevAddress) => ({\n      ...prevAddress,\n      [code]: value,\n    }));\n    hasUnsavedChanges.current = true;\n  };\n\n  const onChange = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n\n    updateField(name, value);\n\n    validateFormElement(target);\n  };\n\n  const onInvalid = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    validateFormElement(target);\n  };\n\n  const onSelection = (event: Event) => {\n    const target = event.target as HTMLSelectElement;\n    const { name, value } = target;\n    updateField(name, value);\n    validateFormElement(target);\n  };\n\n  const onBlur = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    target.checkValidity();\n  };\n\n  // load default, preselected and backup address\n  useEffect(() => {\n    setAddress((prevAddress) => {\n      return {\n        ...defaultValues,\n        ...preselection,\n        ...addressBackup,\n        ...prevAddress,\n      };\n    });\n  }, [defaultValues, preselection, addressBackup]);\n\n  // backup address\n  useEffect(() => {\n    if (!hasUnsavedChanges.current) return;\n    const timerId = backup(address);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [address, backup]);\n\n  // sync address with the backend\n  useEffect(() => {\n    if (!hasUnsavedChanges.current || !isFormValid(formRef)) return;\n\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timer = setTimeout(() => {\n      saveAddressForm({ signal, address });\n    }, DEBOUNCE_TIME);\n\n    return () => {\n      clearTimeout(timer);\n      controller.abort();\n    };\n  }, [address, formRef, saveAddressForm]);\n\n  return {\n    address,\n    setAddress,\n    errors,\n    onChange,\n    onSelection,\n    onBlur,\n    onInvalid,\n  };\n};\n","import { FormFields } from '@/checkout/api';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport { useMemo } from 'preact/hooks';\n\ntype PreselectedFieldKey = keyof PreselectedAddressFields;\n\nexport type PreselectedMappedField = {\n  country_id?: string;\n  region?: string;\n  postcode?: string;\n};\n\ntype PreselectedMappedFieldKey = keyof PreselectedMappedField;\n\nconst FIELD_CODE_MAPPING: {\n  [key in PreselectedFieldKey]: PreselectedMappedFieldKey;\n} = {\n  countryCode: 'country_id',\n  region: 'region',\n  postCode: 'postcode',\n};\n\nexport type UsePreselectedFieldsProps = {\n  fields?: FormFields;\n  preselectedFields?: PreselectedAddressFields;\n};\n\nexport function usePreselectedFields({\n  fields,\n  preselectedFields,\n}: UsePreselectedFieldsProps) {\n  const preselection =\n    useMemo(() => {\n      const hasFields = !!fields && fields.length > 0;\n      const hasPreselectedFields = !!preselectedFields;\n\n      if (!hasFields || !hasPreselectedFields) return null;\n\n      return Object.keys(preselectedFields).reduce((acc, code) => {\n        const formCode = FIELD_CODE_MAPPING[code as PreselectedFieldKey];\n        if (!formCode) return acc;\n\n        const formField = fields.some((field) => field.code === formCode);\n        if (!formField) return acc;\n\n        return {\n          ...acc,\n          [formCode]: preselectedFields[code as PreselectedFieldKey],\n        };\n      }, {} as PreselectedMappedField);\n    }, [fields, preselectedFields]);\n\n  return { preselection };\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nexport const useBreakpoint = () => {\n  const getBreakpoint = () => {\n    if (window.innerWidth >= 1920) return 'xxlarge';\n    if (window.innerWidth >= 1366) return 'xlarge';\n    if (window.innerWidth >= 1024) return 'large';\n    if (window.innerWidth >= 768) return 'medium';\n\n    return 'small';\n  };\n\n  const [breakpoint, setBreakpoint] = useState<\n    ReturnType<typeof getBreakpoint>\n  >(getBreakpoint());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const handleResize = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setBreakpoint(getBreakpoint()), 50);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return breakpoint;\n};\n","import { Heading } from '@/checkout/components';\nimport { useBreakpoint } from '@/checkout/hooks/useBreakpoint';\nimport { Text } from '@adobe/elsie/i18n';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nimport '@/checkout/components/Checkout/Checkout.css';\n\nconst ConditionalWrapper: FunctionComponent<{\n  children?: VNode;\n  className: string;\n}> = ({ children, className }) => {\n  const breakpoint = useBreakpoint();\n  if (breakpoint === 'small') return <>{children}</>;\n  return <div className={className}>{children}</div>;\n};\n\nexport type AsideSections = {\n  cartSummary: VNode;\n  orderSummary: VNode;\n};\n\nconst Aside: FunctionComponent<{ sections: AsideSections }> = ({\n  sections,\n}) => {\n  return (\n    <ConditionalWrapper className=\"checkout__aside\">\n      <>\n        <VComponent node={sections.orderSummary} />\n        <VComponent node={sections.cartSummary} />\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport type MainSections = {\n  billingAddress: VNode;\n  billToShippingAddress?: VNode;\n  login: VNode;\n  paymentMethods: VNode;\n  placeOrder: VNode;\n  shippingAddress?: VNode;\n  shippingMethods?: VNode;\n};\n\nconst MainContent: FunctionComponent<MainSections> = ({\n  billingAddress,\n  billToShippingAddress,\n  login,\n  paymentMethods,\n  placeOrder,\n  shippingAddress,\n  shippingMethods,\n}) => {\n  return (\n    <>\n      <VComponent node={login} />\n      {shippingAddress && <VComponent node={shippingAddress} />}\n      {billToShippingAddress && <VComponent node={billToShippingAddress} />}\n      {shippingMethods && <VComponent node={shippingMethods} />}\n      <VComponent node={paymentMethods} />\n      <VComponent node={billingAddress} />\n      <VComponent node={placeOrder} />\n    </>\n  );\n};\n\nconst Main: FunctionComponent<{\n  outOfStock?: VNode;\n  sections?: MainSections;\n}> = ({ outOfStock, sections }) => {\n  return (\n    <ConditionalWrapper className=\"checkout__main\">\n      <>\n        <Heading level={1} className=\"checkout-title\">\n          <Text id=\"Checkout.title\" />\n        </Heading>\n\n        {outOfStock && (\n          <VComponent className=\"checkout-outOfStock\" node={outOfStock} />\n        )}\n\n        {sections && <MainContent {...sections} />}\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport interface CheckoutProps extends HTMLAttributes<HTMLDivElement> {\n  banner?: VNode;\n}\n\ninterface CheckoutComponent extends FunctionComponent<CheckoutProps> {\n  Main: typeof Main;\n  Aside: typeof Aside;\n}\n\nexport const Checkout: CheckoutComponent = (props) => {\n  const { banner, className, children, ...restProps } = props;\n\n  return (\n    <div className={classes(['checkout', className])} {...restProps}>\n      {banner && <VComponent className=\"checkout__banner\" node={banner} />}\n      <div className=\"checkout__content\">{children}</div>\n    </div>\n  );\n};\n\nCheckout.Main = Main;\nCheckout.Aside = Aside;\n","import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, JSX } from 'preact/compat';\nimport '@/checkout/components/Heading/Heading.css';\n\nexport interface HeadingProps extends Omit<HTMLAttributes<HTMLHeadingElement>, 'level'> {\n  level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: FunctionComponent<HeadingProps> = ({\n  className,\n  children,\n  level = 2,\n}) => {\n  const Heading =\n    level >= 1 && level <= 6\n      ? (`h${level}` as keyof JSX.IntrinsicElements)\n      : 'h2';\n\n  return (\n      <Heading className={className}>\n        {children}\n      </Heading>\n  );\n};\n"],"names":["autocompleteFieldCodes","firstname","lastname","company","country","region","city","postcode","telephone","street","email","middlename","prefix","suffix","isEmpty","obj","Object","keys","length","constructor","isValidOption","option","label","value","transformFormFieldOptions","data","filter","map","text","transformRegionOptions","regions","id","toString","code","name","transformCountryOptions","countries","processFormFields","fields","address","setAddress","addressType","errors","config","availableCountries","availableRegions","onSelection","onChange","onBlur","onInvalid","resetRegion","AddressFormFields","Region","RegionId","syncRegionId","regionId","field","is_required","inputType","frontend_input","options","error","handleSelect","disabled","getMultilineValues","Country","AddressFormTypes","SHIPPING","regionsSignal","event","target","refetchEstimatedShippingMethods","country_code","selectedRegionId","pending","countriesWithRequiredRegion","includes","country_id","displayStateIfOptional","AttributeFrontendInputEnum","Undefined","Select","Text","selectedRegion","region_id","defaultOnChange","region_name","find","regionOption","PostCode","countriesWithOptionalZipCode","className","estimateShipppingTimer","criteria","cartData","cartSignal","hasCartData","firstAddress","shippingAddresses","availableShippingMethods","clearTimeout","setTimeout","estimateShippingMethods","cartId","DEBOUNCE_TIME","validityProps","rules","reduce","props","rule","ValidationRuleEnum","DateRangeMax","max","DateRangeMin","min","FileExtensions","accept","InputValidation","pattern","patternFor","MaxFileSize","MaxImageHeight","MaxImageWidth","MaxTextLength","maxLength","MinTextLength","minLength","Error","patterns","alpha","alphanumeric","numeric","url","type","source","FieldsFormSkeleton","_jsxs","Skeleton","children","_jsx","SkeletonRow","variant","size","fullWidth","lines","hiddenField","default_value","textField","validate_rules","validity","fieldID","Field","Input","autocomplete","floatingLabel","placeholder","required","undefined","multilineField","multiline_count","numOfFields","_Fragment","Array","from","i","selectField","handleSelectAttribute","Picker","createField","FieldsForm","headingId","formRef","classes","Heading","level","ref","noValidate","sort","a","b","sort_order","getFormErrors","form","formData","FormData","fromEntries","result","entries","key","elements","validationMessage","useDefaultValues","defaultCountry","defaultValues","setDefaultValues","useState","useEffect","useRegions","setAvailableRegions","getRegions","then","catch","console","useFormFill","shouldAutoFillForm","hasFormFillCompleted","setHasFormFillCompleted","addressData","billingAddress","isArray","isMultiline","addressFormValues","City","Company","FirstName","firstName","LastName","lastName","postCode","Telephone","Vat","vatId","forEach","index","Street","MULTILINE_SUFFIX","customAttributes","attribute","split","MULTILINE_CUSTOM_ATTR_SPLIT","AddressForm","forwardRef","preselectedFields","saveAddressHandler","useAddressFormFields","useCountries","isLoadingCountries","isLoadingFormFields","useStore","isLoadingStoreConfig","preselection","usePreselectedFields","useRef","useAddressForm","useImperativeHandle","triggerSaveAddress","signal","current","transformedFields","typeMapping","BILLING","Component","useAddressBackup","backupService","useServices","addressBackup","setAddressBackup","backup","restore","onOrder","events","on","remove","off","useCallback","removeBackup","attributesMapping","badInput","patternMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","typeMismatch","valueMissing","constraints","useValidity","translations","setErrors","validateFormElement","formElement","valid","constraint","translation","replace","getAttribute","prevErrors","isFormValid","useText","hasUnsavedChanges","saveAddressForm","command","updateField","prevAddress","checkValidity","timerId","controller","AbortController","timer","abort","FIELD_CODE_MAPPING","countryCode","useMemo","acc","formCode","some","useBreakpoint","getBreakpoint","window","innerWidth","breakpoint","setBreakpoint","timeoutId","handleResize","addEventListener","removeEventListener","ConditionalWrapper","Aside","sections","VComponent","node","orderSummary","cartSummary","MainContent","billToShippingAddress","login","paymentMethods","placeOrder","shippingAddress","shippingMethods","Main","outOfStock","Checkout","banner","restProps"],"mappings":"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"}